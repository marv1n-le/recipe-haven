// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace SWD.RecipeHaven.Data.Models;

public partial class RecipeHavenContext : DbContext
{
    public RecipeHavenContext(DbContextOptions<RecipeHavenContext> options)
        : base(options)
    {
    }  
    public RecipeHavenContext()
    {
    }


    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Ingredient> Ingredients { get; set; }

    public virtual DbSet<NutritionInfo> NutritionInfos { get; set; }

    public virtual DbSet<Origin> Origins { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Recipe> Recipes { get; set; }

    public virtual DbSet<RecipeIngredient> RecipeIngredients { get; set; }

    public virtual DbSet<Step> Steps { get; set; }

    public virtual DbSet<Subscription> Subscriptions { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserSubscription> UserSubscriptions { get; set; }


    private string GetConnectionString(string connectString)
    {
        var configuration = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json", true, true)
            .Build();

        return configuration.GetConnectionString(connectString);
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnectionStringDB"));
    }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK__category__23CAF1D8A5739009");

            entity.ToTable("category");

            entity.Property(e => e.CategoryId).HasColumnName("categoryId");
            entity.Property(e => e.ActiveStatus)
                .HasDefaultValueSql("((1))")
                .HasColumnName("activeStatus");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Ingredient>(entity =>
        {
            entity.HasKey(e => e.IngredientId).HasName("PK__ingredie__2753A527352DDFEC");

            entity.ToTable("ingredient");

            entity.Property(e => e.IngredientId).HasColumnName("ingredientId");
            entity.Property(e => e.ActiveStatus)
                .HasDefaultValueSql("((1))")
                .HasColumnName("activeStatus");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.NutritionInfoId).HasColumnName("nutritionInfoId");
            entity.Property(e => e.Type)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("type");

            //entity.HasOne(d => d.NutritionInfo).WithMany(p => p.Ingredients)
            //    .HasForeignKey(d => d.NutritionInfoId)
            //    .HasConstraintName("FK__ingredien__nutri__59FA5E80");

            //entity.HasMany(d => d.NutritionInfos).WithMany(p => p.IngredientsNavigation)
            //    .UsingEntity<Dictionary<string, object>>(
            //        "IngredientNutritionInfo",
            //        r => r.HasOne<NutritionInfo>().WithMany()
            //            .HasForeignKey("NutritionInfoId")
            //            .OnDelete(DeleteBehavior.ClientSetNull)
            //            .HasConstraintName("FK__ingredien__nutri__5BE2A6F2"),
            //        l => l.HasOne<Ingredient>().WithMany()
            //            .HasForeignKey("IngredientId")
            //            .OnDelete(DeleteBehavior.ClientSetNull)
            //            .HasConstraintName("FK__ingredien__ingre__5AEE82B9"),
            //        j =>
                    //{
                    //    j.HasKey("IngredientId", "NutritionInfoId").HasName("PK__ingredie__B6C28A687421B638");
                    //    j.ToTable("ingredientNutritionInfo");
                    //    j.IndexerProperty<int>("IngredientId").HasColumnName("ingredientId");
                    //    j.IndexerProperty<int>("NutritionInfoId").HasColumnName("nutritionInfoId");
                    //});
        });

        //modelBuilder.Entity<NutritionInfo>(entity =>
        //{
        //    entity.HasKey(e => e.NutritionInfoId).HasName("PK__nutritio__1912F4F8DB3A6D2C");

        //    entity.ToTable("nutritionInfo");

        //    entity.Property(e => e.NutritionInfoId).HasColumnName("nutritionInfoId");
        //    entity.Property(e => e.ActiveStatus)
        //        .HasDefaultValueSql("((1))")
        //        .HasColumnName("activeStatus");
        //    entity.Property(e => e.Calories).HasColumnName("calories");
        //    entity.Property(e => e.Carbs).HasColumnName("carbs");
        //    entity.Property(e => e.Fat).HasColumnName("fat");
        //    entity.Property(e => e.Fiber).HasColumnName("fiber");
        //    entity.Property(e => e.Protein).HasColumnName("protein");
        //    entity.Property(e => e.Sugar).HasColumnName("sugar");
        //});

        modelBuilder.Entity<Origin>(entity =>
        {
            entity.HasKey(e => e.OriginId).HasName("PK__origin__F680FBC82A78D465");

            entity.ToTable("origin");

            entity.Property(e => e.OriginId).HasColumnName("originId");
            entity.Property(e => e.ActiveStatus)
                .HasDefaultValueSql("((1))")
                .HasColumnName("activeStatus");
            entity.Property(e => e.Country)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.CultureDescription)
                .HasColumnType("text")
                .HasColumnName("cultureDescription");
            entity.Property(e => e.Region)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("region");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__payment__A0D9EFC69A7CB099");

            entity.ToTable("payment");

            entity.Property(e => e.PaymentId).HasColumnName("paymentId");
            entity.Property(e => e.ActiveStatus)
                .HasDefaultValueSql("((1))")
                .HasColumnName("activeStatus");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.PaymentDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("paymentDate");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("paymentMethod");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("userId");
            entity.Property(e => e.UserSubscriptionId).HasColumnName("userSubscriptionId");

            entity.HasOne(d => d.User).WithMany(p => p.Payments)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__payment__userId__5CD6CB2B");

            entity.HasOne(d => d.UserSubscription).WithMany(p => p.Payments)
                .HasForeignKey(d => d.UserSubscriptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__payment__userSub__5DCAEF64");
        });

        modelBuilder.Entity<Recipe>(entity =>
        {
            entity.HasKey(e => e.RecipeId).HasName("PK__recipe__C114EE833DF1D6C4");

            entity.ToTable("recipe");

            entity.Property(e => e.RecipeId).HasColumnName("recipeId");
            entity.Property(e => e.ActiveStatus)
                .HasDefaultValueSql("((1))")
                .HasColumnName("activeStatus");
            entity.Property(e => e.CategoryId).HasColumnName("categoryId");
            entity.Property(e => e.CookingMethod)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("cookingMethod");
            entity.Property(e => e.CookingTime).HasColumnName("cookingTime");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("date")
                .HasColumnName("createdDate");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.DifficultyLevel)
                .IsUnicode(false)
                .HasColumnName("difficultyLevel");
            entity.Property(e => e.LastUpdated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("date")
                .HasColumnName("lastUpdated");
            entity.Property(e => e.OriginId).HasColumnName("originId");
            entity.Property(e => e.PreparationTime).HasColumnName("preparationTime");
            entity.Property(e => e.Servings).HasColumnName("servings");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.Category).WithMany(p => p.Recipes)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK__recipe__category__5EBF139D");

            entity.HasOne(d => d.Origin).WithMany(p => p.Recipes)
                .HasForeignKey(d => d.OriginId)
                .HasConstraintName("FK__recipe__originId__5FB337D6");

            entity.HasOne(d => d.User).WithMany(p => p.Recipes)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__recipe__userId__60A75C0F");
        });

        modelBuilder.Entity<RecipeIngredient>(entity =>
        {
            entity.HasKey(e => new { e.RecipeId, e.IngredientId }).HasName("PK__recipeIn__A361D4D1D7F01D4C");

            entity.ToTable("recipeIngredient");

            entity.Property(e => e.RecipeId).HasColumnName("recipeId");
            entity.Property(e => e.IngredientId).HasColumnName("ingredientId");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.Unit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("unit");

            entity.HasOne(d => d.Ingredient).WithMany(p => p.RecipeIngredients)
                .HasForeignKey(d => d.IngredientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__recipeIng__ingre__619B8048");

            entity.HasOne(d => d.Recipe).WithMany(p => p.RecipeIngredients)
                .HasForeignKey(d => d.RecipeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__recipeIng__recip__628FA481");
        });

        modelBuilder.Entity<Step>(entity =>
        {
            entity.HasKey(e => e.StepId).HasName("PK__step__4E25C21DB3398957");

            entity.ToTable("step");

            entity.Property(e => e.StepId).HasColumnName("stepId");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.Image)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("image");
            entity.Property(e => e.RecipeId).HasColumnName("recipeId");
            entity.Property(e => e.StepNumber).HasColumnName("stepNumber");
            entity.Property(e => e.ToolsRequired)
                .HasColumnType("text")
                .HasColumnName("toolsRequired");

            entity.HasOne(d => d.Recipe).WithMany(p => p.Steps)
                .HasForeignKey(d => d.RecipeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__step__recipeId__6383C8BA");
        });

        modelBuilder.Entity<Subscription>(entity =>
        {
            entity.HasKey(e => e.SubscriptionId).HasName("PK__subscrip__4A0F55E701424152");

            entity.ToTable("subscription");

            entity.Property(e => e.SubscriptionId).HasColumnName("subscriptionId");
            entity.Property(e => e.ActiveStatus)
                .HasDefaultValueSql("((1))")
                .HasColumnName("activeStatus");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Price).HasColumnName("price");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__user__CB9A1CFF523E26A6");

            entity.ToTable("user");

            entity.HasIndex(e => e.Email, "UQ__user__AB6E616430C64244").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("userId");
            entity.Property(e => e.ActiveStatus)
                .HasDefaultValueSql("((1))")
                .HasColumnName("activeStatus");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("date")
                .HasColumnName("created_at");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Fullname)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("fullname");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("password");
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("role");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("username");
            entity.Property(e => e.ViewedRecipe)
                .HasDefaultValueSql("((0))")
                .HasColumnName("viewedRecipe");
        });

        modelBuilder.Entity<UserSubscription>(entity =>
        {
            entity.HasKey(e => e.UserSubscriptionId).HasName("PK__userSubs__DCB673CDB97C8CD6");

            entity.ToTable("userSubscription");

            entity.Property(e => e.UserSubscriptionId).HasColumnName("userSubscriptionId");
            entity.Property(e => e.ActiveStatus)
                .HasDefaultValueSql("((1))")
                .HasColumnName("activeStatus");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("endDate");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("startDate");
            entity.Property(e => e.SubscriptionId).HasColumnName("subscriptionId");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.Subscription).WithMany(p => p.UserSubscriptions)
                .HasForeignKey(d => d.SubscriptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__userSubsc__subsc__6477ECF3");

            entity.HasOne(d => d.User).WithMany(p => p.UserSubscriptions)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__userSubsc__userI__656C112C");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}